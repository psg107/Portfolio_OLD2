@using Portfolio.Services
@inject ProjectService ProjectService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<div id="project" class="projects" @ref="Reference">
    <div class="title cursor-pointer" @onclick="ToggleProjectOrder">
        프로젝트<span class="arrow @projectArrowClassStyle"></span>
    </div>
    <div class="project-tag">
        <span class="project-icon private cursor-pointer @privateProjectIconStyle" @onclick="TogglePrivateProject"></span>
        <span class="project-icon company cursor-pointer @companyProjectIconStyle" @onclick="ToggleCompanyProject"></span>
        <span class="project-icon incomplete cursor-pointer @incompleteProjectIconStyle" @onclick="ToggleIncompleteProject"></span>
    </div>
    <div class="contents">
        @foreach (var project in projects)
        {
            <div class="project-item">
                <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                    @{
                        if (string.IsNullOrEmpty(@project.ImageFilePath) == false)
                        {
                            <div class="project-img-wrapper cursor-pointer" @onclick="() => OpenProjectImageUrl(project)">
                                <img src="@project.ImageFilePath" alt="" srcset="">
                            </div>
                        }
                        else
                        {
                            <div class="project-img-wrapper">
                                <img src="/images/project/noImage.jpg" alt="" srcset="">
                            </div>
                        }
                    }

                    <div class="project-description">
                        <div class="project-icons">
                            @if (project.ProjectType.HasFlag(Entities.ProjectType.Private))
                            {
                                <span class="project-icon private"></span>
                            }
                            @if (project.ProjectType.HasFlag(Entities.ProjectType.Company))
                            {
                                <span class="project-icon company"></span>
                            }
                            @if (project.ProjectType.HasFlag(Entities.ProjectType.Incomplete))
                            {
                                <span class="project-icon incomplete"></span>
                            }
                        </div>
                        <ul class="project-skills">
                            @foreach (var skill in project.Skills)
                            {
                                <li>@skill.Name</li>
                            }
                        </ul>

                        <div class="project-title">@project.Name</div>
                        <div class="project-created-year">@(project.CreateYear?.ToString() ?? "-")</div>
                        <pre class="project-description-text">@project.Description</pre>

                        <div class="project-btn-container">
                            @if (!project.IsHiddenSourceUrl && !string.IsNullOrEmpty(project.SourceUrl))
                            {
                                <a class="project-btn" href="@project.SourceUrl" target="_blank">Source</a>
                            }
                            @if (!string.IsNullOrEmpty(project.ReferenceUrl))
                            {
                                <a class="project-btn" href="@project.ReferenceUrl" target="_blank">Link</a>
                            }
                        </div>
                    </div>
                </Animate>
            </div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// true: 회사 프로젝트 우선 출력, false: 개인 프로젝트 우선 출력
    /// </summary>
    public bool companyFirst = false;

    /// <summary>
    /// 프로젝트 옆에 달린 화살표 방향 클래스
    /// </summary>
    public string projectArrowClassStyle
        => companyFirst ? "arrow-down" : "arrow-up";

    /// <summary>
    /// 
    /// </summary>
    public string privateProjectIconStyle
        => this.HidePrivateProject ? "off" : string.Empty;

    /// <summary>
    /// 
    /// </summary>
    public string companyProjectIconStyle
        => this.HideCompanyProject ? "off" : string.Empty;

    /// <summary>
    /// 
    /// </summary>
    public string incompleteProjectIconStyle
        => this.HideIncompleteProject ? "off" : string.Empty;

    /// <summary>
    /// 최상단 element
    /// </summary>
    public ElementReference Reference { get; set; }

    /// <summary>
    /// 프로젝트
    /// </summary>
    private List<Models.Project> projects;

    /// <summary>
    /// 
    /// </summary>
    public bool HidePrivateProject { get; set; }

    /// <summary>
    /// 
    /// </summary>
    public bool HideCompanyProject { get; set; }

    /// <summary>
    /// 
    /// </summary>
    public bool HideIncompleteProject { get; set; }

    /// <summary>
    /// 
    /// </summary>
    public int ActivateProjectIconCount
    {
        get
        {
            var cnt = 0;

            cnt = cnt + (this.HidePrivateProject == false ? 1 : 0);
            cnt = cnt + (this.HideCompanyProject == false ? 1 : 0);

            return cnt;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.companyFirst = new Random().Next(0, 2) == 1;

        LoadProjects();
    }

    /// <summary>
    /// 프로젝트 정렬 화살표 토글
    /// </summary>
    private void ToggleProjectOrder()
    {
        companyFirst = !companyFirst;

        LoadProjects();
    }

    /// <summary>
    ///
    /// </summary>
    private void LoadProjects()
    {
        var project = ProjectService.GetProjects();

#warning 전부 로드해놓고 메모리에서 처리함
        if (this.HidePrivateProject)
        {
            project = project.Where(x => !x.ProjectType.HasFlag(Entities.ProjectType.Private));
        }
        if (this.HideCompanyProject)
        {
            project = project.Where(x => !x.ProjectType.HasFlag(Entities.ProjectType.Company));
        }
        if (this.HideIncompleteProject)
        {
            project = project.Where(x => !x.ProjectType.HasFlag(Entities.ProjectType.Incomplete));
        }

        IOrderedEnumerable<Models.Project> orderedProject = companyFirst
          ? project.OrderByDescending(x => x.ProjectType.HasFlag(Entities.ProjectType.Company))
          : project.OrderBy(x => x.ProjectType.HasFlag(Entities.ProjectType.Company));

        project = orderedProject.ThenByDescending(x => x.CreateYear).ThenByDescending(x => x.ProjectId);

        this.projects = project.ToList();
    }

    /// <summary>
    /// 이미지 새창에서 열기
    /// </summary>
    /// <param name="project"></param>
    private async Task OpenProjectImageUrl(Models.Project project)
    {
        if (string.IsNullOrEmpty(project?.ImageFilePath))
        {
            return;
        }

        await JSRuntime.InvokeAsync<object>("open", $"{NavManager.BaseUri}{project.ImageFilePath}", "_blank");
    }

    /// <summary>
    /// 개인 on/off
    /// </summary>
    private void TogglePrivateProject()
    {
        if (ActivateProjectIconCount <= 1 && !this.HidePrivateProject)
        {
            return;
        }

        this.HidePrivateProject = !this.HidePrivateProject;

        LoadProjects();
    }

    /// <summary>
    /// 회사 on/off
    /// </summary>
    private void ToggleCompanyProject()
    {
        if (ActivateProjectIconCount <= 1 && !this.HideCompanyProject)
        {
            return;
        }

        this.HideCompanyProject = !this.HideCompanyProject;

        LoadProjects();
    }

    /// <summary>
    /// 미완성 on/off
    /// </summary>
    private void ToggleIncompleteProject()
    {
        this.HideIncompleteProject = !this.HideIncompleteProject;

        LoadProjects();
    }
}
